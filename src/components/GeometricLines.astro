---
// Geometric lines component inspired by your image
export interface Props {
  variant?: 'horizontal' | 'vertical' | 'cross';
  animate?: boolean;
  delay?: number;
}

const { variant = 'horizontal', animate = true, delay = 0 } = Astro.props;
---

<div class="geometric-lines-container">
  {variant === 'horizontal' && (
    <svg class="w-full h-1" viewBox="0 0 100 1" preserveAspectRatio="none">
      <line 
        x1="0" y1="0.5" x2="100" y2="0.5" 
        class={`geometric-line ${animate ? 'draw-line' : ''}`}
        style={animate ? `animation-delay: ${delay}s` : ''}
      />
    </svg>
  )}
  
  {variant === 'vertical' && (
    <svg class="w-1 h-full" viewBox="0 0 1 100" preserveAspectRatio="none">
      <line 
        x1="0.5" y1="0" x2="0.5" y2="100" 
        class={`geometric-line ${animate ? 'draw-line' : ''}`}
        style={animate ? `animation-delay: ${delay}s` : ''}
      />
    </svg>
  )}
  
  {variant === 'cross' && (
    <svg class="w-full h-full absolute inset-0" viewBox="0 0 100 100">
      <line 
        x1="0" y1="50" x2="100" y2="50" 
        class={`geometric-line ${animate ? 'draw-line' : ''}`}
        style={animate ? `animation-delay: ${delay}s` : ''}
      />
      <line 
        x1="50" y1="0" x2="50" y2="100" 
        class={`geometric-line ${animate ? 'draw-line' : ''}`}
        style={animate ? `animation-delay: ${delay + 0.5}s` : ''}
      />
    </svg>
  )}
</div>

<style>
  .geometric-line {
    stroke: #f97316;
    stroke-width: 2;
    fill: none;
    stroke-linecap: round;
    filter: drop-shadow(0 0 6px rgba(249, 115, 22, 0.6));
  }
  
  .draw-line {
    stroke-dasharray: 1000;
    stroke-dashoffset: 1000;
    animation: drawLine 2s ease-out forwards;
  }
  
  @keyframes drawLine {
    to {
      stroke-dashoffset: 0;
    }
  }
</style>